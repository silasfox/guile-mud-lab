
\input texinfo
@c -*-texinfo-*-

@c %**start of header
@setfilename guile-mud-lab.info
@documentencoding UTF-8
@settitle Guile Mud-Lab Reference Manual
@c %**end of header

@include version.texi

@copying
Copyright @copyright{} 2020 Silas Vedder

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
copy of the license is included in the section entitled ``GNU Free
Documentation License''.
@end copying

@dircategory The Algorithmic Language Scheme
@direntry
* Guile Mud-Lab: (guile-mud-lab).   
@end direntry

@titlepage
@title The Guile Mud-Lab Manual
@author Silas Vedder

@page
@vskip 0pt plus 1filll
Edition @value{EDITION} @*
@value{UPDATED} @*

@insertcopying
@end titlepage

@contents

@c *********************************************************************
@node Top
@top Guile Mud-Lab

This document describes Guile Mud-Lab version @value{VERSION}.

@menu
* Introduction::                Why Guile Mud-Lab?
* Rooms::                       How to create rooms.
* Player::                      How to create a player and move them around.
@end menu

@c *********************************************************************
@node Introduction
@chapter Introduction

INTRODUCTION

Guile Mud-Lab is a library to build MUDs in Guile Scheme. Currently only
player creation and movement are supported.

@c *********************************************************************
@node Rooms
@chapter Rooms

ROOMS

You can create a room with the function 'make-room'. It takes four
arguments: The room's name (a string), the room's description (a
string), the location (a pair of two integers) and the available exits
(a list of strings).

   (define room (make-room ``bar'' ``A bar'' (cons 0 0) (list ``north'')))

   => ((``name'' . ``bar'') (``description'' . ``A bar'') (``location'' 0 . 0)
   (``exits'' ``north''))

@c *********************************************************************
@node Player
@chapter Player

PLAYER

You can create a player with the function 'make-player'. It takes one
argument and creates a new player with an empty inventory at location
(0. 0).

    (define player (make-player ``John''))

    => ((``name'' . ``John'') (``inventory'') (``location 0 . 0))

Movement is easy:

    (go-to ``north'' player rooms)
    
    => ((``name'' . ``John'') (``inventory'') (``location'' 1 . 0))

'rooms' is a list of rooms.

@bye
